//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Script/IA/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""be362fd1-47c0-4f49-8a55-ec1221cc7f16"",
            ""actions"": [
                {
                    ""name"": ""WalkForward"",
                    ""type"": ""Button"",
                    ""id"": ""8b183aec-866a-4c2f-8696-d5d5bb3115a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WalkBackward"",
                    ""type"": ""Button"",
                    ""id"": ""883e4f43-28b0-4564-b5c8-fb27c1df5a6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""99fdda04-2914-443e-8d7e-0ffc50646498"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleTimeScale"",
                    ""type"": ""Button"",
                    ""id"": ""1361faf1-b463-41e6-9834-10c53efa0640"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f467f336-774e-4185-822b-623355c438f7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69890c1b-0097-4934-bb30-d0dc01e0f645"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1786b5b3-82bf-4ead-baad-0985728e174f"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9520ea71-3dd8-41bc-8893-9315ac7915f1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleTimeScale"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_WalkForward = m_Player.FindAction("WalkForward", throwIfNotFound: true);
        m_Player_WalkBackward = m_Player.FindAction("WalkBackward", throwIfNotFound: true);
        m_Player_Reload = m_Player.FindAction("Reload", throwIfNotFound: true);
        m_Player_ToggleTimeScale = m_Player.FindAction("ToggleTimeScale", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_WalkForward;
    private readonly InputAction m_Player_WalkBackward;
    private readonly InputAction m_Player_Reload;
    private readonly InputAction m_Player_ToggleTimeScale;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @WalkForward => m_Wrapper.m_Player_WalkForward;
        public InputAction @WalkBackward => m_Wrapper.m_Player_WalkBackward;
        public InputAction @Reload => m_Wrapper.m_Player_Reload;
        public InputAction @ToggleTimeScale => m_Wrapper.m_Player_ToggleTimeScale;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @WalkForward.started += instance.OnWalkForward;
            @WalkForward.performed += instance.OnWalkForward;
            @WalkForward.canceled += instance.OnWalkForward;
            @WalkBackward.started += instance.OnWalkBackward;
            @WalkBackward.performed += instance.OnWalkBackward;
            @WalkBackward.canceled += instance.OnWalkBackward;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
            @ToggleTimeScale.started += instance.OnToggleTimeScale;
            @ToggleTimeScale.performed += instance.OnToggleTimeScale;
            @ToggleTimeScale.canceled += instance.OnToggleTimeScale;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @WalkForward.started -= instance.OnWalkForward;
            @WalkForward.performed -= instance.OnWalkForward;
            @WalkForward.canceled -= instance.OnWalkForward;
            @WalkBackward.started -= instance.OnWalkBackward;
            @WalkBackward.performed -= instance.OnWalkBackward;
            @WalkBackward.canceled -= instance.OnWalkBackward;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
            @ToggleTimeScale.started -= instance.OnToggleTimeScale;
            @ToggleTimeScale.performed -= instance.OnToggleTimeScale;
            @ToggleTimeScale.canceled -= instance.OnToggleTimeScale;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnWalkForward(InputAction.CallbackContext context);
        void OnWalkBackward(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnToggleTimeScale(InputAction.CallbackContext context);
    }
}
